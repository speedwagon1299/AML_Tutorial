
Folder       |	Purpose
===================================================================================================================
.cloud       |	Store cloud-specific code and artifacts in this folder. The artifacts include configuration files 
             |  for the Azure Machine Learning workspace, including compute target definitions, jobs, registered models, 
             |  and endpoints.
===================================================================================================================
.github/wfs  |	Store Azure DevOps or GitHub artifacts like YAML pipelines or code owners in this folder.
===================================================================================================================
src 	     |  Include the actual code that's developed as part of the project in this folder. This folder can contain 
             |  Python packages and some scripts that are used for the respective steps of the machine learning pipeline. 
             |  We recommend separating individual steps that need to be done in this folder. Common steps are 
             |  preprocessing, model training, and model registration. Define dependencies like Conda dependencies, 
             |  Docker images, or others for each folder.
===================================================================================================================
docs	     |  Use this folder for documentation purposes. This folder stores Markdown files and images to describe the
             |  project.
===================================================================================================================
pipelines	 |  Store Azure Machine Learning pipelines definitions in YAML or Python in this folder.
===================================================================================================================
tests	     |  Write unit and integration tests that need to be executed to discover bugs and issues early during the 
             |  project in this folder.
===================================================================================================================
notebooks	 |  Separate Jupyter notebooks from the actual Python project with this folder. Inside the folder, each 
             |  individual should have a subfolder to check in their notebooks and prevent Git merge conflicts.

Challenge 0: Convert a notebook to production code
https://microsoftlearning.github.io/mslearn-mlops/documentation/00-script.html

1. Convert notebook to script .py file keeping only essential and logging code
2. Fixed code in src/model/train.py to include autolog from mlflow
3. Create yaml file (job) to execute python commands appropriately

------------------------------------------------------------------------------------------------------------------------

Challenge 1: Create an Azure Machine Learning job
https://microsoftlearning.github.io/mslearn-mlops/documentation/01-aml-job.html

1. Create resource group (tutorial-dev-rg) and workspace (aml-tutorial-dev), configure defaults
2. Create yaml file for environment configs (basic-env-ml) and another yaml file to point to the environment file (basic-env)
3. Create yaml file for linking local dataset to azure data (data-local-path)
4. Config environment and create data using created yaml files
5. Create compute cluster with 0 min instances (delete when finished)
6. Create job with job yaml file

------------------------------------------------------------------------------------------------------------------------

Challenge 2: Trigger the Azure Machine Learning job with GitHub Actions
https://microsoftlearning.github.io/mslearn-mlops/documentation/02-github-actions

1. Create project in DevOps (linked to GitHub) and create a service connection (aml-tutorial-dev-sc) 
2. Create a service principal (aml-tutorial-dev-sp) and store the credentials in the GitHub repo as a secret
3. Create GitHub workflow yaml file (02-manual-trigger-job) with appropriate commands for the pipeline [job name must be unique]
4. Ensure AML compute cluster is active and the name is appropriately referenced in the job yaml file

------------------------------------------------------------------------------------------------------------------------

Challenge 3: Trigger GitHub Actions with feature-based development
https://microsoftlearning.github.io/mslearn-mlops/documentation/03-trigger-workflow.html

1. Create 03-pull-rq yaml trigger file to activate when pull request to main is performed
2. Add branch protection to main branch through GitHub GUI (Pull request review)
3. Create new branch with git checkout -b <branch_name>, make a change and push
4. Verify that the workflow runs on pull request

------------------------------------------------------------------------------------------------------------------------

Challenge 4: Work with linting and unit testing
https://microsoftlearning.github.io/mslearn-mlops/documentation/04-unit-test-linting

1. Individually run jobs on workflow manual to make GitHub recognize it
2. Set up flake8 and pytest jobs in pull request triggered yaml file
3. Edit branch rule to run both jobs (Linting and Pytest) before allowing Pull request
4. Verify with new branch and delete after pull request

------------------------------------------------------------------------------------------------------------------------

Challenge 5: Work with environments
https://microsoftlearning.github.io/mslearn-mlops/documentation/05-environments.html

1. Go to GitHub repo settings and make the repo public
2. Create Development and Production environment and give AZURE_CREDENTIALS (service principal) to both of them
3. Add an approval check for Production environment and remove AZURE_CREDENTIALS from global secrets
3. New local data path for production data file
4. Similar to how job.yaml calls dev dataset, create one for production to test out the model (job2.yml)